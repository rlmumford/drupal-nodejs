<?php

/**
 * Implements nodejs_views_menu().
 */
function nodejs_views_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'nodejs_views') . '/includes/views',
    'template path' => drupal_get_path('module', 'nodejs_views') . 'themes',
    );
}

/**
 * Implements nodejs_views_menu().
 */
function nodejs_views_menu() {
  return array(
    'admin/config/nodejs/viewswrapperconfig' => array(
      'title' => 'Views Wrapper Configuration',
      'description' => 'Adjust node.js views wrapper settings.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('nodejs_views_wrapper_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'nodejs_views.admin.inc',
      ),
    'nodejs_views/getviewblockcontent' => array(
      'title' => 'Variable request from Node.js server',
      'page callback' => 'nodejs_views_variable_handler',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
  );
}

function nodejs_views_init() {

  nodejs_send_content_channel_token('nodejs_views');

  $query = db_select('views_display', 'vd');
  $blocks = $query->fields('vd',array('vid'))
			->condition('vd.display_plugin', 'nodejs_block')
			->execute()
			->fetchAll();

  foreach ($blocks as $vid) {
   $view = _nodejs_views_get_view_by_vid($vid->vid);
   $commands[] = ajax_command_html(_nodejs_views_get_wrapper_id($vid->vid, 'nodejs_block'), _nodejs_views_get_view($vid->vid, $view->current_display));
  $message = (object) array(
    'channel' => 'nodejs_views',
    'commands' => $commands,
    'callback' => 'nodejsViews',
                            );
  nodejs_send_content_channel_message($message);
  }
 $pages = $query->fields('vd',array('vid'))
			->condition('vd.display_plugin', 'nodejs_page')
			->execute()
			->fetchAll();

  foreach ($pages as $vid) {
   $view = _nodejs_views_get_view_by_vid($vid->vid);
   $commands[] = ajax_command_html(_nodejs_views_get_wrapper_id($vid->vid, 'nodejs_page'), _nodejs_views_get_view($vid->vid, $view->current_display));
  $message = (object) array(
    'channel' => 'nodejs_views',
    'commands' => $commands,
    'callback' => 'nodejsViews',
                            );
  nodejs_send_content_channel_message($message);
  }
}

/**
 * Implements hook_nodejs_handlers_info().
 */
function nodejs_views_nodejs_handlers_info() {
  return array(
    drupal_get_path('module', 'nodejs_views') . '/nodejs_views.js',
  );
}

/**                                                                                      
 * Implements hook_nodejs_user_channels().   
 */
function nodejs_views_nodejs_user_channels($account) {
  if (user_access('access views', $account)) {
    return array('nodejs_views');
  }
  return array();
}

/**
 * Return the html of a view.
 */
function _nodejs_views_get_view($vid, $display) {

  $query = db_select('views_view', 'vv');
  
  $viewname = $query->fields('vv',array('name'))
			->condition('vv.vid', $vid)
			->execute()
			->fetchCol();

  if ($viewname) {
    $view = views_get_view($viewname[0]);
    if ($view)
      $html = $view->preview($display);
    else
      $html = '';
  }
  else
    $html = '';

  return $html;
}

/**
 * Return the html of a view.
 */
function _nodejs_views_get_view_by_vid($vid) {

  $query = db_select('views_view', 'vv');
  
  $viewname = $query->fields('vv',array('name'))
			->condition('vv.vid', $vid)
			->execute()
			->fetchCol();

  if ($viewname) {
    $view = views_get_view($viewname[0]);
  }
  return $view;
}

/**
 * Return the wrapper id html of a view.
 */
function _nodejs_views_get_wrapper_id($vid, $display) {

  $query = db_select('views_view', 'vv');
  $viewname = $query->fields('vv',array('human_name'))
    ->condition('vv.vid', $vid)                                                         
    ->execute()                                                                         
    ->fetchCol();                                                                       
      
  $id = '.view-' . str_replace(' ', '-', strtolower($viewname[0]));
  if ($display == 'nodejs_block')
    return variable_get('nodejs_block_wrapper'.$vid, $id);
  if ($display == 'nodejs_page')
    return variable_get('nodejs_page_wrapper'.$vid, $id);

}
